<?php
/**
 * LightningInvoiceOutput
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phenixio API Reference
 *
 * # Introduction  The Phenixio API allows you to integrate Lightning Network payments into your application.  ## Just Getting Started?  Start developing your Phenixio integration with our client libraries. We will publish a guide soon: [Development Quickstart](https://github.com/phenixio/sdk)   ## Generating Access Token  API endpoints require token based authentication. You can [Generate Access Token](#post-/token/) with your user credentials. You will recieve an access token in JWT format. Set your request header \"Authorization: Bearer `<YOUR-ACCESS-TOKEN>`\"   ## Curl Example  Test your access token with Curl request. Replace `<YOUR-ACCESS-TOKEN>` with your actual token.   ```bash $ curl -I -X GET --http1.1 -H \"Content-Type: application/json\" -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\"  https://sandbox.phenixio.com/api/charges/ ```
 *
 * The version of the OpenAPI document: v0.4.2-beta [testnet]
 * Contact: support@phenixio.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LightningInvoiceOutput Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LightningInvoiceOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LightningInvoiceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'network' => 'string',
        'payment_request' => 'string',
        'expiry' => 'int',
        'r_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'network' => null,
        'payment_request' => null,
        'expiry' => null,
        'r_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network' => 'network',
        'payment_request' => 'payment_request',
        'expiry' => 'expiry',
        'r_hash' => 'r_hash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network' => 'setNetwork',
        'payment_request' => 'setPaymentRequest',
        'expiry' => 'setExpiry',
        'r_hash' => 'setRHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network' => 'getNetwork',
        'payment_request' => 'getPaymentRequest',
        'expiry' => 'getExpiry',
        'r_hash' => 'getRHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['network'] = $data['network'] ?? null;
        $this->container['payment_request'] = $data['payment_request'] ?? null;
        $this->container['expiry'] = $data['expiry'] ?? null;
        $this->container['r_hash'] = $data['r_hash'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['network']) && (mb_strlen($this->container['network']) > 15)) {
            $invalidProperties[] = "invalid value for 'network', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['network']) && (mb_strlen($this->container['network']) < 1)) {
            $invalidProperties[] = "invalid value for 'network', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['payment_request'] === null) {
            $invalidProperties[] = "'payment_request' can't be null";
        }
        if ((mb_strlen($this->container['payment_request']) > 500)) {
            $invalidProperties[] = "invalid value for 'payment_request', the character length must be smaller than or equal to 500.";
        }

        if ((mb_strlen($this->container['payment_request']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_request', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['expiry'] === null) {
            $invalidProperties[] = "'expiry' can't be null";
        }
        if (($this->container['expiry'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'expiry', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['expiry'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'expiry', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['r_hash'] === null) {
            $invalidProperties[] = "'r_hash' can't be null";
        }
        if ((mb_strlen($this->container['r_hash']) > 100)) {
            $invalidProperties[] = "invalid value for 'r_hash', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['r_hash']) < 1)) {
            $invalidProperties[] = "invalid value for 'r_hash', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network Lightning Network version (testnet/mainnet)
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (!is_null($network) && (mb_strlen($network) > 15)) {
            throw new \InvalidArgumentException('invalid length for $network when calling LightningInvoiceOutput., must be smaller than or equal to 15.');
        }
        if (!is_null($network) && (mb_strlen($network) < 1)) {
            throw new \InvalidArgumentException('invalid length for $network when calling LightningInvoiceOutput., must be bigger than or equal to 1.');
        }

        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return string
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param string $payment_request A bare-bones invoice for a payment within the Lightning Network. With the details of the invoice, the sender has all the data necessary to send a payment to the recipient.
     *
     * @return self
     */
    public function setPaymentRequest($payment_request)
    {
        if ((mb_strlen($payment_request) > 500)) {
            throw new \InvalidArgumentException('invalid length for $payment_request when calling LightningInvoiceOutput., must be smaller than or equal to 500.');
        }
        if ((mb_strlen($payment_request) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_request when calling LightningInvoiceOutput., must be bigger than or equal to 1.');
        }

        $this->container['payment_request'] = $payment_request;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return int
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param int $expiry Payment request expiry time in seconds.
     *
     * @return self
     */
    public function setExpiry($expiry)
    {

        if (($expiry > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $expiry when calling LightningInvoiceOutput., must be smaller than or equal to 2147483647.');
        }
        if (($expiry < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $expiry when calling LightningInvoiceOutput., must be bigger than or equal to -2147483648.');
        }

        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets r_hash
     *
     * @return string
     */
    public function getRHash()
    {
        return $this->container['r_hash'];
    }

    /**
     * Sets r_hash
     *
     * @param string $r_hash Base64 encoded hash of the corresponding invoice preimage
     *
     * @return self
     */
    public function setRHash($r_hash)
    {
        if ((mb_strlen($r_hash) > 100)) {
            throw new \InvalidArgumentException('invalid length for $r_hash when calling LightningInvoiceOutput., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($r_hash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $r_hash when calling LightningInvoiceOutput., must be bigger than or equal to 1.');
        }

        $this->container['r_hash'] = $r_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


